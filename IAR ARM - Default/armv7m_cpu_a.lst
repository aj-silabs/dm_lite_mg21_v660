                                - armv7m_cpu_a -                      Page    1

    1                           ;
    2                           ;/********************************************
                                *******************************//**
    3                           ; * @file
    4                           ; * @brief CPU - ARM Cortex-M Port
    5                           ; ********************************************
                                ***********************************
    6                           ; * # License
    7                           ; * <b>Copyright 2018 Silicon Laboratories
                                 Inc. www.silabs.com</b>
    8                           ; ********************************************
                                ***********************************
    9                           ; *
   10                           ; * The licensor of this software is Silicon
                                 Laboratories Inc.  Your use of this
   11                           ; * software is governed by the terms of
                                 Silicon Labs Master Software License
   12                           ; * Agreement (MSLA) available at
   13                           ; * www.silabs.com/about-us/legal/master-softw
                                are-license-agreement.  This
   14                           ; * software is distributed to you in Source
                                 Code format and is governed by the
   15                           ; * sections of the MSLA applicable to Source
                                 Code.
   16                           ; *
   17                           ; ********************************************
                                **********************************/
   18                           
   19                           ;*********************************************
                                ***********************************************
                                ********//**
   20                           ;* @note       (1) This port targets the
                                 following:
   21                           ;*               Core      : ARMv7M Cortex-M
   22                           ;*               Mode      : Thumb-2
                                 ISA
   23                           ;*               Toolchain : ARMCC Compiler
   24                           ;*********************************************
                                ***********************************************
                                ***********/
   25                           
   26                           ;*********************************************
                                ***********************************************
                                ************
   27                           ;                                     
                                 DEPRECATED PUBLIC FUNCTIONS
   28                           ;*********************************************
                                ***********************************************
                                ************
   29                           
   30                                   PUBLIC  CPU_IntDis
   31                                   PUBLIC  CPU_IntEn
   32                           
   33                                   PUBLIC  CPU_SR_Save
   34                                   PUBLIC  CPU_SR_Restore
   35                           
   36                                   PUBLIC  CPU_WaitForInt
   37                                   PUBLIC  CPU_WaitForExcept
   38                           
   39                           ;*********************************************
                                ***********************************************
                                ************
   40                           ;                                          
                                 PUBLIC FUNCTIONS
   41                           ;*********************************************
                                ***********************************************
                                ************
   42                           
   43                                   PUBLIC  CPU_CntLeadZeros
   44                                   PUBLIC  CPU_CntTrailZeros
   45                                   PUBLIC  CPU_RevBits
   46                           
   47                           
   48                           ;*********************************************
                                ***********************************************
                                ************
   49                           ;                                      CODE
                                 GENERATION DIRECTIVES
                                - armv7m_cpu_a -                      Page    2

   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           
   52                                   RSEG CODE:CODE:NOROOT(2)
   53                                   THUMB
   54                           
   55                           ;*********************************************
                                ***********************************************
                                ************
   56                           ;                                    DISABLE
                                 and ENABLE INTERRUPTS
   57                           ;
   58                           ; Description: Disable/Enable interrupts.
   59                           ;
   60                           ; Prototypes : void  CPU_IntDis(void);
   61                           ;              void  CPU_IntEn (void);
   62                           ;
   63                           ; Note(s)    : These functions are deprecated.
   64                           ;*********************************************
                                ***********************************************
                                ************
   65                           
   66                           CPU_IntDis
   67    00000000 72B6                  CPSID   I
   68    00000002 7047                  BX      LR
   69                           
   70                           
   71                           CPU_IntEn
   72    00000004 62B6                  CPSIE   I
   73    00000006 7047                  BX      LR
   74                           
   75                           
   76                           ;*********************************************
                                ***********************************************
                                ************
   77                           ;                                     
                                 CRITICAL SECTION FUNCTIONS
   78                           ;
   79                           ; Description : Disable/Enable interrupts by
                                 preserving the state of interrupts.  Generally
                                 speaking, the
   80                           ;               state of the interrupt disable
                                 flag is stored in the local variable 'cpu_sr'
                                 & interrupts
   81                           ;               are then disabled ('cpu_sr' is
                                 allocated in all functions that need to
                                 disable interrupts).
   82                           ;               The previous interrupt state
                                 is restored by copying 'cpu_sr' into the CPU's
                                 status register.
   83                           ;
   84                           ; Prototypes  : CPU_SR  CPU_SR_Save  
                                 (void);
   85                           ;               void    CPU_SR_Restore(CPU_SR 
                                 cpu_sr);
   86                           ;
   87                           ; Note(s)     : (1) These functions are used
                                 in general like this :
   88                           ;
   89                           ;                       void  Task (void 
                                 *p_arg)
   90                           ;                       {
   91                           ;                           CPU_SR_ALLOC();   
                                                  /* Allocate storage for CPU
                                 status register */
   92                           ;                               :
   93                           ;                               :
   94                           ;                           CPU_CRITICAL_ENTER
                                ();               /* cpu_sr = CPU_SR_Save();   
                                               */
   95                           ;                               :
   96                           ;                               :
   97                           ;                           CPU_CRITICAL_EXIT(
                                );                /* CPU_SR_Restore(cpu_sr);   
                                               */
   98                           ;                               :
   99                           ;                       }
                                - armv7m_cpu_a -                      Page    3

  100                           ;
  101                           ;               (2) These functions are
                                 deprecated.
  102                           ;*********************************************
                                ***********************************************
                                ************
  103                           
  104                           CPU_SR_Save
  105    00000008 EFF31080              MRS     R0, PRIMASK                    
                                                      ; Set prio int mask to
                                                      mask all (except
                                                      faults)
  106    0000000C 72B6                  CPSID   I
  107    0000000E 7047                  BX      LR
  108                           
  109                           
  110                           CPU_SR_Restore                                
                                  ; See Note #2.
  111    00000010 80F31088              MSR     PRIMASK, R0
  112    00000014 7047                  BX      LR
  113                           
  114                           
  115                           ;*********************************************
                                ***********************************************
                                ************
  116                           ;                                         WAIT
                                 FOR INTERRUPT
  117                           ;
  118                           ; Description : Enters sleep state, which will
                                 be exited when an interrupt is received.
  119                           ;
  120                           ; Prototypes  : void  CPU_WaitForInt
                                 (void)
  121                           ;
  122                           ; Argument(s) : none.
  123                           ;
  124                           ; Note(s)    : This function is deprecated.
  125                           ;*********************************************
                                ***********************************************
                                ************
  126                           
  127                           CPU_WaitForInt:
  128    00000016 30BF                  WFI                                    
  ; Wait for interrupt
  129    00000018 7047                  BX      LR
  130                           
  131                           
  132                           ;*********************************************
                                ***********************************************
                                ************
  133                           ;                                         WAIT
                                 FOR EXCEPTION
  134                           ;
  135                           ; Description : Enters sleep state, which will
                                 be exited when an exception is received.
  136                           ;
  137                           ; Prototypes  : void  CPU_WaitForExcept
                                 (void)
  138                           ;
  139                           ; Argument(s) : none.
  140                           ;
  141                           ; Note(s)    : This function is deprecated.
  142                           ;*********************************************
                                ***********************************************
                                ************
  143                           
  144                           CPU_WaitForExcept:
  145    0000001A 20BF                  WFE                                    
  ; Wait for exception
  146    0000001C 7047                  BX      LR
  147                           
  148                           
  149                           ;*********************************************
                                ***********************************************
                                ************
  150                           ;                                        
                                 CPU_CntLeadZeros()
  151                           ;                                        COUNT
                                - armv7m_cpu_a -                      Page    4

                                 LEADING ZEROS
  152                           ;
  153                           ; Description : Counts the number of
                                 contiguous, most-significant, leading zero
                                 bits before the 
  154                           ;                   first binary one bit in a
                                 data value.
  155                           ;
  156                           ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU
                                _DATA  val);
  157                           ;
  158                           ; Argument(s) : val         Data value to
                                 count leading zero bits.
  159                           ;
  160                           ; Return(s)   : Number of contiguous,
                                 most-significant, leading zero bits in
                                 'val'.
  161                           ;
  162                           ; Caller(s)   : Application.
  163                           ;
  164                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application 
  165                           ;               function(s).
  166                           ;
  167                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h  
  168                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  169                           ;
  170                           ;                   (b) For 32-bit values
                                 :
  171                           ;
  172                           ;                             b31  b30  b29 
                                 ...  b04  b03  b02  b01  b00    # Leading
                                 Zeros
  173                           ;                             ---  ---  ---   
                                    ---  ---  ---  ---  ---    ---------------
  174                           ;                              1    x    x    
                                     x    x    x    x    x           
                                 0
  175                           ;                              0    1    x    
                                     x    x    x    x    x           
                                 1
  176                           ;                              0    0    1    
                                     x    x    x    x    x           
                                 2
  177                           ;                              :    :    :    
                                     :    :    :    :    :           
                                 :
  178                           ;                              :    :    :    
                                     :    :    :    :    :           
                                 :
  179                           ;                              0    0    0    
                                     1    x    x    x    x           27
  180                           ;                              0    0    0    
                                     0    1    x    x    x           28
  181                           ;                              0    0    0    
                                     0    0    1    x    x           29
  182                           ;                              0    0    0    
                                     0    0    0    1    x           30
  183                           ;                              0    0    0    
                                     0    0    0    0    1           31
  184                           ;                              0    0    0    
                                     0    0    0    0    0           32
  185                           ;
  186                           ;
  187                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_LEAD_ZER
                                OS_ASM_PRESENT is 
  188                           ;                   #define'd in 'cpu_port.h'
  189                           ;*********************************************
                                ***********************************************
                                ************
  190                           
  191                           CPU_CntLeadZeros:
  192    0000001E B0FA80F0              CLZ     R0, R0                         
                                - armv7m_cpu_a -                      Page    5

                                                      ; Count leading
                                                      zeros
  193    00000022 7047                  BX      LR
  194                           
  195                           
  196                           ;*********************************************
                                ***********************************************
                                ************
  197                           ;                                        
                                 CPU_CntTrailZeros()
  198                           ;                                        COUNT
                                 TRAILING ZEROS
  199                           ;
  200                           ; Description : Counts the number of
                                 contiguous, least-significant, trailing zero
                                 bits before the 
  201                           ;                   first binary one bit in a
                                 data value.
  202                           ;
  203                           ; Prototype   : CPU_DATA  CPU_CntTrailZeros(CP
                                U_DATA  val);
  204                           ;
  205                           ; Argument(s) : val         Data value to
                                 count trailing zero bits.
  206                           ;
  207                           ; Return(s)   : Number of contiguous,
                                 least-significant, trailing zero bits in
                                 'val'.
  208                           ;
  209                           ; Caller(s)   : Application.
  210                           ;
  211                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application 
  212                           ;               function(s).
  213                           ;
  214                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h  
  215                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  216                           ;
  217                           ;                   (b) For 32-bit values
                                 :
  218                           ;
  219                           ;                             b31  b30  b29 
                                 b28  b27  ...  b02  b01  b00    # Trailing
                                 Zeros
  220                           ;                             ---  ---  --- 
                                 ---  ---       ---  ---  ---    --------------
                                --
  221                           ;                              x    x    x   
                                 x    x         x    x    1           
                                 0
  222                           ;                              x    x    x   
                                 x    x         x    1    0           
                                 1
  223                           ;                              x    x    x   
                                 x    x         1    0    0           
                                 2
  224                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
  225                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
  226                           ;                              x    x    x   
                                 x    1         0    0    0          
                                 27
  227                           ;                              x    x    x   
                                 1    0         0    0    0          
                                 28
  228                           ;                              x    x    1   
                                 0    0         0    0    0          
                                 29
  229                           ;                              x    1    0   
                                 0    0         0    0    0          
                                 30
                                - armv7m_cpu_a -                      Page    6

  230                           ;                              1    0    0   
                                 0    0         0    0    0          
                                 31
  231                           ;                              0    0    0   
                                 0    0         0    0    0          
                                 32
  232                           ;
  233                           ;
  234                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_TRAIL_ZE
                                ROS_ASM_PRESENT is 
  235                           ;                   #define'd in 'cpu_cfg.h'
                                 or 'cpu.h'.
  236                           ;*********************************************
                                ***********************************************
                                ************
  237                           
  238                           CPU_CntTrailZeros:
  239    00000024 90FAA0F0              RBIT    R0, R0                         
                                                      ; Reverse bits
  240    00000028 B0FA80F0              CLZ     R0, R0                         
                                                      ; Count trailing
                                                      zeros
  241    0000002C 7047                  BX      LR
  242                           
  243                           
  244                           ;*********************************************
                                ***********************************************
                                ************
  245                           ;                                           
                                 CPU_RevBits()
  246                           ;                                           
                                 REVERSE BITS
  247                           ;
  248                           ; Description : Reverses the bits in a data
                                 value.
  249                           ;
  250                           ; Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA
                                  val);
  251                           ;
  252                           ; Argument(s) : val         Data value to
                                 reverse bits.
  253                           ;
  254                           ; Return(s)   : Value with all bits in 'val'
                                 reversed (see Note #1).
  255                           ;
  256                           ; Caller(s)   : Application.
  257                           ;
  258                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application function(s).
  259                           ;
  260                           ; Note(s)     : (1) The final, reversed data
                                 value for 'val' is such that :
  261                           ;
  262                           ;                       'val's final bit  0   
                                    =  'val's original bit  N
  263                           ;                       'val's final bit  1   
                                    =  'val's original bit (N - 1)
  264                           ;                       'val's final bit  2   
                                    =  'val's original bit (N - 2)
  265                           ;
  266                           ;                               ...           
                                                ...
  267                           ;
  268                           ;                       'val's final bit (N -
                                 2)  =  'val's original bit  2
  269                           ;                       'val's final bit (N -
                                 1)  =  'val's original bit  1
  270                           ;                       'val's final bit  N   
                                    =  'val's original bit  0
  271                           ;
  272                           ;               (2) This function is
                                 DEPRECATED and will be removed in a future
                                 version of this product.
  273                           ;*********************************************
                                ***********************************************
                                ************
                                - armv7m_cpu_a -                      Page    7

  274                           
  275                           CPU_RevBits:
  276    0000002E 90FAA0F0              RBIT    R0, R0                         
                                                      ; Reverse bits
  277    00000032 7047                  BX      LR
  278                           
  279                           
  280                           ;*********************************************
                                ***********************************************
                                ************
  281                           ;                                     CPU
                                 ASSEMBLY PORT FILE END
  282                           ;*********************************************
                                ***********************************************
                                ************
  283                           
  284                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 52          #
##############################



